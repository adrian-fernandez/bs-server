request_spec_object_template.template
# Authentication credential declared in spec/support/api.rb
# @staff_role
# @staff_user
# @staff_user_session

require 'rails_helper'

describe 'Api::<%= api_version.upcase %>::<%= model.pluralize.camelize %>Controller', type: :request do
  let!(:user) { create :user }
  let!(:user2) { create :user }
  let!(:<%= model.downcase.singularize.underscore %>) { create :<%= model.downcase.singularize.underscore %>}
  let!(:session_data) do
    {
      '_BOOKINGSYNC_CURRENT_USER' => @staff_user,
      '_t' => @staff_user.access_token
    }
  end

  describe 'GET /<%= model.downcase.pluralize.underscore %>' do
    let!(:url) { '/api/<%= api_version.downcase %>/<%= model.downcase.pluralize.underscore %>' }

    context 'authenticated' do
      before(:all) do
        get url, params: {}, headers: session_data
      end

      it 'is successful' do
        expect(response.status).to eq(200)

        expect(response).to match_json_schema('<%= model.downcase.pluralize.underscore %>')

        <%= model.downcase.pluralize.underscore %> = [<%= model.downcase.singularize.underscore %>1, <%= model.downcase.singularize.underscore %>2, <%= model.downcase.singularize.underscore %>3]
        expect(response.body).to match_json_payload(<%= model.downcase.pluralize.underscore %>_payload(<%= model.downcase.pluralize.underscore %>))
      end
    end

    context 'not authenticated' do
      it_behaves_like 'forbidden', 'get', '/api/<%= api_version.downcase %>/<%= model.downcase.pluralize.underscore %>'
    end
  end

  describe 'GET /<%= model.downcase.pluralize.underscore %>/:id' do
    let!(:url) { "/api/<%= api_version.downcase %>/<%= model.downcase.pluralize.underscore %>/#{<%= model.downcase.singularize.underscore %>1.id}" }

    context 'authenticated' do
      before(:each) do
        get url, params: {}, headers: session_data
      end

      it 'is successful' do
        expect(response.status).to eq(200)
      end

      it 'returns valid JSON schema' do
        expect(response).to match_json_schema('<%= model.downcase.singularize.underscore %>')
      end

      it 'returns valid JSON payload' do
        expect(response.body).to match_json_payload(<%= model.downcase.singularize.underscore %>_payload(<%= model.downcase.singularize.underscore %>1))
      end
    end

    context 'not authenticated' do
      it_behaves_like 'forbidden', 'get', '/api/<%= api_version.downcase %>/<%= model.downcase.pluralize.underscore %>/9999'
    end
  end

  describe 'POST /<%= model.downcase.pluralize.underscore %>' do
    let!(:url) { '/api/<%= api_version.downcase %>/<%= model.downcase.pluralize.underscore %>' }

    context 'authenticated' do
      context 'with valid params' do
        let!(:valid_params) do
          {
            <%= model.downcase.singularize.underscore %>: {
            }
          }
        end

        before(:all) do
          post url, params: valid_params, headers: session_data
        end

        it 'is successful' do
          expect(response.status).to eq(201)
        end

        it 'returns valid JSON schema' do
          expect(response).to match_json_schema('<%= model.downcase.singularize.underscore %>')
        end

        it 'returns valid JSON payload' do
          expect(response.body).to match_json_payload(<%= model.downcase.singularize.underscore %>_payload(<%= model.downcase.singularize.camelize %>.last))
        end
      end

      context 'with invalid params' do
        let!(:invalid_params) do
          {
            <%= model.downcase.singularize.underscore %>: {
            }
          }
        end

        before(:all) do
          post url, params: invalid_params, headers: session_data
        end

        it 'is unprocessable' do
          expect(response.status).to eq(422)
        end

        it 'returns valid JSON schema' do
          expect(response).to match_json_schema('validation_error')
        end

        it 'returns valid JSON payload' do
          expect(response.body).to match_json_payload(
            validation_error_payload([:end_at, ['errors.messages.invalid_date', 'errors.messages.blank']])
          )
        end
      end
    end

    context 'not authenticated' do
      it_behaves_like 'forbidden', 'post', '/api/<%= api_version.downcase %>/<%= model.downcase.pluralize.underscore %>'
    end
  end

  describe 'PUT /<%= model.downcase.pluralize.underscore %>/:id' do
    let!(:url) { "/api/<%= api_version.downcase %>/<%= model.downcase.pluralize.underscore %>/#{<%= model.downcase.singularize.underscore %>1.id}" }

    context 'authenticated' do
      context 'with valid params' do
        let!(:valid_params) do
          {
            <%= model.downcase.singularize.underscore %>: {
            }
          }
        end

        before(:all) do
          put url, params: valid_params, headers: session_data
        end

        it 'is successful' do
          expect(response.status).to eq(200)
        end

        it 'returns valid JSON schema' do
          expect(response).to match_json_schema('<%= model.downcase.singularize.underscore %>')
        end

        it 'returns valid JSON payload' do
          expect(response.body).to match_json_payload(<%= model.downcase.singularize.underscore %>_payload(<%= model.downcase.singularize.camelize %>.find(<%= model.downcase.singularize.underscore %>1.id)))
        end
      end

      context 'with invalid params' do
        let!(:invalid_params) do
          {
            <%= model.downcase.singularize.underscore %>: {
            }
          }
        end

        before(:all) do
          put url, params: invalid_params, headers: session_data
        end

        it 'is unprocessable' do
          expect(response.status).to eq(422)
        end

        it 'returns valid JSON schema' do
          expect(response).to match_json_schema('validation_error')
        end

        it 'returns valid JSON payload' do
          expect(response.body).to match_json_payload(
            validation_error_payload([:end_at, ['errors.messages.invalid_date', 'errors.messages.blank']])
          )
        end
      end
    end

    context 'not authenticated' do
      it_behaves_like 'forbidden', 'put', '/api/<%= api_version.downcase %>/<%= model.downcase.pluralize.underscore %>/9999'
    end
  end

  describe 'DELETE /<%= model.downcase.pluralize.underscore %>/:id' do
    let!(:url) { "/api/<%= api_version.downcase %>/<%= model.downcase.pluralize.underscore %>/#{<%= model.downcase.singularize.underscore %>1.id}" }

    context 'authenticated' do
      before(:all) do
        delete url, params: {}, headers: session_data
      end

      it 'is successful' do
        expect(response.status).to eq(204)
      end

      it 'returns empty response' do
        expect(response.body).to eq('')
      end

      it 'destroys <%= model.downcase.singularize.underscore %>' do
        expect(<%= model.downcase.singularize.camelize %>.where(id: <%= model.downcase.singularize.underscore %>1.id).first).to be_nil
      end
    end

    context 'not authenticated' do
      it_behaves_like 'forbidden', 'delete', '/api/<%= api_version.downcase %>/<%= model.downcase.pluralize.underscore %>/9999'
    end
  end
end
