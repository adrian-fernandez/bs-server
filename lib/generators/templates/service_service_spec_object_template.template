require 'rails_helper'
RSpec.describe Api::<%= api_version.upcase %>::Services::<%= model.singularize.camelize %>Service do
  let!(:client) { create(:client) }
  let!(:user) { create(:user, client: client) }

  describe '.class_name' do
    let!(:service) do
      Api::<%= api_version.upcase %>::Services::<%= model.singularize.camelize %>Service.new
    end

    it 'should return the name of the associated class' do
      expect(service.send(:class_name)).to eq(<%= model.singularize.camelize %>)
    end
  end

  describe '.repository' do
    let!(:service) do
      Api::<%= api_version.upcase %>::Services::<%= model.singularize.camelize %>Service.new(
        current_client: client,
        current_user: user
      )
    end

    it 'should return Api::<%= api_version.upcase %>::Repositories::<%= model.pluralize.camelize %>Repository' do
      expect(service.send(:repository)).to eq(Api::<%= api_version.upcase %>::Repositories::<%= model.pluralize.camelize %>Repository)
    end
  end

  describe '.create' do
    context 'with valid data' do
      let!(:service) do
        Api::<%= api_version.upcase %>::Services::<%= model.singularize.camelize %>Service.new(
          current_client: client,
          current_user: user,
          params: { <%= model.singularize.underscore %>: { } }
        )
      end

      it 'should create the object and return true' do
        expect(service.create).to be_truthy
        expect(<%= model.singularize.camelize %>.count).to eq(1)

        created_object = <%= model.singularize.camelize %>.last
        expect(created_object).to eq(service.item)
        expect(created_object.user_id).to eq(user.id)
        expect(created_object.client_id).to eq(client.id)
      end
    end

    context 'with invalid data' do
      let!(:service) do
        Api::<%= api_version.upcase %>::Services::<%= model.singularize.camelize %>Service.new(
          current_client: client,
          current_user: user,
          params: { <%= model.singularize.underscore %>: { } }
        )
      end

      it 'should not create anything and return false' do
        expect(service.create).to be_falsey
        expect(<%= model.singularize.camelize %>.count).to eq(0)
        expect(service.item.errors.messages.keys).to eq([])
      end
    end

    context 'with invalid data for strong params' do
      let!(:service) do
        Api::<%= api_version.upcase %>::Services::<%= model.singularize.camelize %>Service.new(
          current_client: client,
          current_user: user,
          params: { }
        )
      end

      it 'should not create anything and return false' do
        expect(service.create).to be_falsey
        expect(<%= model.singularize.camelize %>.count).to eq(0)
        expect(service.item).to be_nil
      end
    end
  end

  describe '.update' do
    let!(:<%= model.singularize.underscore %>) do
      create :<%= model.singularize.underscore %>,
        user: user,
        client: client
    end

    context 'with valid data' do
      let!(:service) do
        Api::<%= api_version.upcase %>::Services::<%= model.singularize.camelize %>Service.new(
          item: <%= model.singularize.underscore %>,
          current_client: client,
          current_user: user,
          params: { <%= model.singularize.underscore %>: { } }
        )
      end

      it 'should update the object and return true' do
        expect(service.update).to be_truthy
        expect(<%= model.singularize.camelize %>.count).to eq(1)

        updated_object = <%= model.singularize.camelize %>.last
        expect(updated_object).to eq(service.item)
        expect(updated_object.user_id).to eq(user.id)
        expect(updated_object.client_id).to eq(client.id)
      end
    end

    context 'with invalid data' do
      let!(:service) do
        Api::<%= api_version.upcase %>::Services::<%= model.singularize.camelize %>Service.new(
          item: <%= model.singularize.underscore %>,
          current_client: client,
          current_user: user,
          params: { <%= model.singularize.underscore %>: { } }
        )
      end

      it 'should not update anything and return false' do
        expect(service.update).to be_falsey
        expect(<%= model.singularize.camelize %>.count).to eq(1)
        expect(service.item.errors.messages.keys).to eq([:])
      end
    end

    context 'with invalid data for strong params' do
      let!(:service) do
        Api::<%= api_version.upcase %>::Services::<%= model.singularize.camelize %>Service.new(
          item: <%= model.singularize.underscore %>,
          current_client: client,
          current_user: user,
          params: { }
        )
      end

      it 'should not update anything and return false' do
        expect(service.update).to be_falsey
        expect(<%= model.singularize.camelize %>.count).to eq(1)
        updated_object = <%= model.singularize.camelize %>.last

        expect(service.item).to eq(updated_object)
      end
    end
  end

  describe '.destroy' do
    let!(:<%= model.singularize.underscore %>) { create :<%= model.singularize.underscore %>, client: client, user: user }

    let!(:service) do
      Api::<%= api_version.upcase %>::Services::<%= model.singularize.camelize %>Service.new(
        item: <%= model.singularize.underscore %>,
        current_client: client,
        current_user: user
      )
    end

    it 'should destroy the object and return true' do
      expect(service.destroy).to be_truthy

      expect(<%= model.singularize.camelize %>.count).to eq(0)
    end
  end
end
