require 'rails_helper'
RSpec.describe Api::<%= api_version.upcase %>::Repositories::<%= model.singularize.camelize %>Repository do
  let!(:client) { create(:client) }
  let!(:user) { create(:user, client: client) }

  describe '.search_filters' do
    it 'should return array of Filters' do
      expect(subject.send(:search_filters)).to eq(
        [
          Api::<%= api_version.upcase %>::Filters::GenericFilters::IdsFilter,
          Api::<%= api_version.upcase %>::Filters::GenericFilters::ExcludeIdsFilter
        ]
      )
    end
  end

  describe '.fuzzy_search_fields' do
    it 'should return array of fields' do
      expect(subject.fuzzy_search_fields).to eq([])
    end
  end

  describe '.visible_by' do
    let!(:client2) { create(:client) }
    let!(:client3) { create(:client) }
    let!(:role_admin) { create(:role, client: client, name: 'admin') }
    let!(:user_admin) { create(:user, client: client, role: role_admin) }

    let!(:<%= model.singulatize.underscore %>_client2) { create :<%= model.singulatize.underscore %>, client: client2 }
    let!(:rental) { create :rental, name: 'My sample rental', client: client }
    let!(:rental2) { create :rental, name: 'Lorem Ipsum', client: client }
    let!(:<%= model.singulatize.underscore %>1) { create :<%= model.singulatize.underscore %>, user: user, client: client }
    let!(:<%= model.singulatize.underscore %>2) { create :<%= model.singulatize.underscore %>, user: user, client: client }
    let!(:<%= model.singulatize.underscore %>3) { create :<%= model.singulatize.underscore %>, user: user, client: client }
    let!(:<%= model.singulatize.underscore %>4) { create :<%= model.singulatize.underscore %>, client: client }

    context 'when user is admin' do
      let!(:repository) do
        Api::<%= api_version.upcase %>::Repositories::<%= model.singulatize.camelize %>Repository.new(
          current_client: client,
          current_user: user_admin
        )
      end

      it 'should see everything owned by its client' do
        expect(repository.collection.pluck(:id).sort).to eq(
          [
            <%= model.singulatize.underscore %>1.id,
            <%= model.singulatize.underscore %>2.id,
            <%= model.singulatize.underscore %>3.id,
            <%= model.singulatize.underscore %>4.id
          ]
        )
      end
    end

    context 'when user is normal user' do
      let!(:repository) do
        Api::<%= api_version.upcase %>::Repositories::<%= model.singulatize.camelize %>Repository.new(
          current_client: client,
          current_user: user
        )
      end

      it 'should see <%= model.pluralize %> owned by himself' do
        expect(repository.collection.pluck(:id).sort).to eq(
          [
            <%= model.singulatize.underscore %>1.id,
            <%= model.singulatize.underscore %>2.id,
            <%= model.singulatize.underscore %>3.id
          ]
        )
      end
    end

    context 'when user is nil' do
      let!(:repository) do
        Api::<%= api_version.upcase %>::Repositories::<%= model.singulatize.camelize %>Repository.new(
          current_client: client
        )
      end

      it 'should not see anything' do
        expect(repository.collection.pluck(:id).sort).to eq(
          [
          ]
        )
      end
    end
  end

  describe '.service_name' do
    it 'should return the name of the service' do
      expect(subject.send(:service_name).to_s).to eq('<%= model.singularize.camelize %>')
    end
  end

  describe '.sort_service' do
    it 'should return the name of the sorting service' do
      expect(subject.send(:sort_service).to_s).to eq('Api::<%= api_version.upcase %>::Sorters::<%= model.singularize.camelize %>Sorter')
    end
  end

  describe '.filter_service' do
    it 'should return the name of the filtering service' do
      expect(subject.send(:filter_service).to_s).to eq('Api::<%= api_version.upcase %>::Filters::<%= model.singularize.camelize %>Filters')
    end
  end

  describe 'select fields' do
    context 'when there are selected fields' do
      let(:subject_with_params) { Api::<%= api_version.upcase %>::Repositories::<%= model.singularize.camelize %>Repository.new(params: { selected_fields: ['id'] }) }

      it '.select_fields? should return true' do
        expect(subject_with_params.send(:select_fields?)).to be_truthy
      end

      it '.selected_fields should an array of field names' do
        expect(subject_with_params.send(:selected_fields)).to eq(['id'])
      end
    end

    context 'when there are not selected fields' do
      it '.select_fields? should return false' do
        expect(subject.send(:select_fields?)).to be_falsey
      end

      it '.selected_fields should an empty array' do
        expect(subject.send(:selected_fields)).to eq([])
      end
    end
  end

  describe '.paginate?' do
    it 'should return true by default' do
      expect(subject.send(:paginate?)).to be_truthy
    end

    it 'should return false when it has param paginate=false' do
      subject_with_params = Api::<%= api_version.upcase %>::Repositories::<%= model.pluralize.camelize %>Repository.new(params: { paginate: 'false' })

      expect(subject_with_params.send(:paginate?)).to be_falsey
    end
  end

  describe '.no_selectable_fields' do
    it 'should return an empty array' do
      expect(subject.send(:no_selectable_fields)).to eq([])
    end
  end
end
